
name: the_muezzin

services:
  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.0
    container_name: elastic-tm
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana-tm
    ports:
      - "5601:5601"
    depends_on:
      elastic:
        condition: service_healthy

  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
   image: bitnami/zookeeper:3.9
   container_name: zookeeper
   environment:
    - ALLOW_ANONYMOUS_LOGIN=yes
   ports:
    - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 10


  upload_files:
   build:
     context: .
     dockerfile: services/upload_files/Dockerfile
   container_name: upload_files
   depends_on:
      elastic:
        condition: service_healthy
      kibana:
        condition: service_started
      mongo:
        condition: service_healthy
      kafka:
       condition: service_healthy

  process_files:
   build:
     context: .
     dockerfile: services/process_files/Dockerfile
   container_name: process_files
   depends_on:
     elastic:
       condition: service_healthy
     upload_files:
       condition: service_started

  analyze_files:
   build:
     context: .
     dockerfile: services/upload_files/Dockerfile
   container_name: analyze_files
   depends_on:
    upload_files:
     condition: service_started